// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `login.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:mypackage.Login)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Login {
    // message fields
    // @@protoc_insertion_point(field:mypackage.Login.account)
    pub account: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:mypackage.Login.password)
    pub password: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:mypackage.Login.version)
    pub version: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:mypackage.Login.platform)
    pub platform: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:mypackage.Login.device)
    pub device: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:mypackage.Login.meid)
    pub meid: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:mypackage.Login.expect_payload)
    pub expect_payload: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:mypackage.Login.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Login {
    fn default() -> &'a Login {
        <Login as ::protobuf::Message>::default_instance()
    }
}

impl Login {
    pub fn new() -> Login {
        ::std::default::Default::default()
    }

    // required string account = 1;

    pub fn account(&self) -> &str {
        match self.account.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_account(&mut self) {
        self.account = ::std::option::Option::None;
    }

    pub fn has_account(&self) -> bool {
        self.account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: ::std::string::String) {
        self.account = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account(&mut self) -> &mut ::std::string::String {
        if self.account.is_none() {
            self.account = ::std::option::Option::Some(::std::string::String::new());
        }
        self.account.as_mut().unwrap()
    }

    // Take field
    pub fn take_account(&mut self) -> ::std::string::String {
        self.account.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string password = 2;

    pub fn password(&self) -> &str {
        match self.password.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_password(&mut self) {
        self.password = ::std::option::Option::None;
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: ::std::string::String) {
        self.password = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut ::std::string::String {
        if self.password.is_none() {
            self.password = ::std::option::Option::Some(::std::string::String::new());
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> ::std::string::String {
        self.password.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional int32 version = 3;

    pub fn version(&self) -> i32 {
        self.version.unwrap_or(0)
    }

    pub fn clear_version(&mut self) {
        self.version = ::std::option::Option::None;
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i32) {
        self.version = ::std::option::Option::Some(v);
    }

    // required string platform = 4;

    pub fn platform(&self) -> &str {
        match self.platform.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_platform(&mut self) {
        self.platform = ::std::option::Option::None;
    }

    pub fn has_platform(&self) -> bool {
        self.platform.is_some()
    }

    // Param is passed by value, moved
    pub fn set_platform(&mut self, v: ::std::string::String) {
        self.platform = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_platform(&mut self) -> &mut ::std::string::String {
        if self.platform.is_none() {
            self.platform = ::std::option::Option::Some(::std::string::String::new());
        }
        self.platform.as_mut().unwrap()
    }

    // Take field
    pub fn take_platform(&mut self) -> ::std::string::String {
        self.platform.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string device = 5;

    pub fn device(&self) -> &str {
        match self.device.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_device(&mut self) {
        self.device = ::std::option::Option::None;
    }

    pub fn has_device(&self) -> bool {
        self.device.is_some()
    }

    // Param is passed by value, moved
    pub fn set_device(&mut self, v: ::std::string::String) {
        self.device = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_device(&mut self) -> &mut ::std::string::String {
        if self.device.is_none() {
            self.device = ::std::option::Option::Some(::std::string::String::new());
        }
        self.device.as_mut().unwrap()
    }

    // Take field
    pub fn take_device(&mut self) -> ::std::string::String {
        self.device.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string meid = 6;

    pub fn meid(&self) -> &str {
        match self.meid.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_meid(&mut self) {
        self.meid = ::std::option::Option::None;
    }

    pub fn has_meid(&self) -> bool {
        self.meid.is_some()
    }

    // Param is passed by value, moved
    pub fn set_meid(&mut self, v: ::std::string::String) {
        self.meid = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_meid(&mut self) -> &mut ::std::string::String {
        if self.meid.is_none() {
            self.meid = ::std::option::Option::Some(::std::string::String::new());
        }
        self.meid.as_mut().unwrap()
    }

    // Take field
    pub fn take_meid(&mut self) -> ::std::string::String {
        self.meid.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint32 expect_payload = 7;

    pub fn expect_payload(&self) -> u32 {
        self.expect_payload.unwrap_or(101u32)
    }

    pub fn clear_expect_payload(&mut self) {
        self.expect_payload = ::std::option::Option::None;
    }

    pub fn has_expect_payload(&self) -> bool {
        self.expect_payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expect_payload(&mut self, v: u32) {
        self.expect_payload = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "account",
            |m: &Login| { &m.account },
            |m: &mut Login| { &mut m.account },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "password",
            |m: &Login| { &m.password },
            |m: &mut Login| { &mut m.password },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "version",
            |m: &Login| { &m.version },
            |m: &mut Login| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "platform",
            |m: &Login| { &m.platform },
            |m: &mut Login| { &mut m.platform },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "device",
            |m: &Login| { &m.device },
            |m: &mut Login| { &mut m.device },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "meid",
            |m: &Login| { &m.meid },
            |m: &mut Login| { &mut m.meid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "expect_payload",
            |m: &Login| { &m.expect_payload },
            |m: &mut Login| { &mut m.expect_payload },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Login>(
            "Login",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Login {
    const NAME: &'static str = "Login";

    fn is_initialized(&self) -> bool {
        if self.account.is_none() {
            return false;
        }
        if self.platform.is_none() {
            return false;
        }
        if self.device.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.account = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.password = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.version = ::std::option::Option::Some(is.read_int32()?);
                },
                34 => {
                    self.platform = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.device = ::std::option::Option::Some(is.read_string()?);
                },
                50 => {
                    self.meid = ::std::option::Option::Some(is.read_string()?);
                },
                56 => {
                    self.expect_payload = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.account.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.password.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.version {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        if let Some(v) = self.platform.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.device.as_ref() {
            my_size += ::protobuf::rt::string_size(5, &v);
        }
        if let Some(v) = self.meid.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(v) = self.expect_payload {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.account.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.password.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.version {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.platform.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.device.as_ref() {
            os.write_string(5, v)?;
        }
        if let Some(v) = self.meid.as_ref() {
            os.write_string(6, v)?;
        }
        if let Some(v) = self.expect_payload {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Login {
        Login::new()
    }

    fn clear(&mut self) {
        self.account = ::std::option::Option::None;
        self.password = ::std::option::Option::None;
        self.version = ::std::option::Option::None;
        self.platform = ::std::option::Option::None;
        self.device = ::std::option::Option::None;
        self.meid = ::std::option::Option::None;
        self.expect_payload = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Login {
        static instance: Login = Login {
            account: ::std::option::Option::None,
            password: ::std::option::Option::None,
            version: ::std::option::Option::None,
            platform: ::std::option::Option::None,
            device: ::std::option::Option::None,
            meid: ::std::option::Option::None,
            expect_payload: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Login {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Login").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Login {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Login {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:mypackage.LoginAck)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LoginAck {
    // message fields
    // @@protoc_insertion_point(field:mypackage.LoginAck.result)
    pub result: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:mypackage.LoginAck.usr)
    pub usr: ::protobuf::MessageField<login_ack::User>,
    // @@protoc_insertion_point(field:mypackage.LoginAck.conf)
    pub conf: ::protobuf::MessageField<login_ack::Configure>,
    // special fields
    // @@protoc_insertion_point(special_field:mypackage.LoginAck.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LoginAck {
    fn default() -> &'a LoginAck {
        <LoginAck as ::protobuf::Message>::default_instance()
    }
}

impl LoginAck {
    pub fn new() -> LoginAck {
        ::std::default::Default::default()
    }

    // required int32 result = 1;

    pub fn result(&self) -> i32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: i32) {
        self.result = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &LoginAck| { &m.result },
            |m: &mut LoginAck| { &mut m.result },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, login_ack::User>(
            "usr",
            |m: &LoginAck| { &m.usr },
            |m: &mut LoginAck| { &mut m.usr },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, login_ack::Configure>(
            "conf",
            |m: &LoginAck| { &m.conf },
            |m: &mut LoginAck| { &mut m.conf },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LoginAck>(
            "LoginAck",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LoginAck {
    const NAME: &'static str = "LoginAck";

    fn is_initialized(&self) -> bool {
        if self.result.is_none() {
            return false;
        }
        if self.usr.is_none() {
            return false;
        }
        if self.conf.is_none() {
            return false;
        }
        for v in &self.usr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.conf {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.usr)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.conf)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.usr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.conf.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.usr.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.conf.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LoginAck {
        LoginAck::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.usr.clear();
        self.conf.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LoginAck {
        static instance: LoginAck = LoginAck {
            result: ::std::option::Option::None,
            usr: ::protobuf::MessageField::none(),
            conf: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LoginAck {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LoginAck").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LoginAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoginAck {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `LoginAck`
pub mod login_ack {
    // @@protoc_insertion_point(message:mypackage.LoginAck.User)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct User {
        // message fields
        // @@protoc_insertion_point(field:mypackage.LoginAck.User.uid)
        pub uid: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.User.name)
        pub name: ::std::option::Option<::std::string::String>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.User.online)
        pub online: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.User.usr_attri)
        pub usr_attri: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.User.number)
        pub number: ::std::option::Option<::std::string::String>,
        // special fields
        // @@protoc_insertion_point(special_field:mypackage.LoginAck.User.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a User {
        fn default() -> &'a User {
            <User as ::protobuf::Message>::default_instance()
        }
    }

    impl User {
        pub fn new() -> User {
            ::std::default::Default::default()
        }

        // required uint32 uid = 1;

        pub fn uid(&self) -> u32 {
            self.uid.unwrap_or(0)
        }

        pub fn clear_uid(&mut self) {
            self.uid = ::std::option::Option::None;
        }

        pub fn has_uid(&self) -> bool {
            self.uid.is_some()
        }

        // Param is passed by value, moved
        pub fn set_uid(&mut self, v: u32) {
            self.uid = ::std::option::Option::Some(v);
        }

        // required string name = 2;

        pub fn name(&self) -> &str {
            match self.name.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_name(&mut self) {
            self.name = ::std::option::Option::None;
        }

        pub fn has_name(&self) -> bool {
            self.name.is_some()
        }

        // Param is passed by value, moved
        pub fn set_name(&mut self, v: ::std::string::String) {
            self.name = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_name(&mut self) -> &mut ::std::string::String {
            if self.name.is_none() {
                self.name = ::std::option::Option::Some(::std::string::String::new());
            }
            self.name.as_mut().unwrap()
        }

        // Take field
        pub fn take_name(&mut self) -> ::std::string::String {
            self.name.take().unwrap_or_else(|| ::std::string::String::new())
        }

        // optional bool online = 3;

        pub fn online(&self) -> bool {
            self.online.unwrap_or(false)
        }

        pub fn clear_online(&mut self) {
            self.online = ::std::option::Option::None;
        }

        pub fn has_online(&self) -> bool {
            self.online.is_some()
        }

        // Param is passed by value, moved
        pub fn set_online(&mut self, v: bool) {
            self.online = ::std::option::Option::Some(v);
        }

        // optional uint32 usr_attri = 4;

        pub fn usr_attri(&self) -> u32 {
            self.usr_attri.unwrap_or(0)
        }

        pub fn clear_usr_attri(&mut self) {
            self.usr_attri = ::std::option::Option::None;
        }

        pub fn has_usr_attri(&self) -> bool {
            self.usr_attri.is_some()
        }

        // Param is passed by value, moved
        pub fn set_usr_attri(&mut self, v: u32) {
            self.usr_attri = ::std::option::Option::Some(v);
        }

        // optional string number = 5;

        pub fn number(&self) -> &str {
            match self.number.as_ref() {
                Some(v) => v,
                None => "",
            }
        }

        pub fn clear_number(&mut self) {
            self.number = ::std::option::Option::None;
        }

        pub fn has_number(&self) -> bool {
            self.number.is_some()
        }

        // Param is passed by value, moved
        pub fn set_number(&mut self, v: ::std::string::String) {
            self.number = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_number(&mut self) -> &mut ::std::string::String {
            if self.number.is_none() {
                self.number = ::std::option::Option::Some(::std::string::String::new());
            }
            self.number.as_mut().unwrap()
        }

        // Take field
        pub fn take_number(&mut self) -> ::std::string::String {
            self.number.take().unwrap_or_else(|| ::std::string::String::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(5);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "uid",
                |m: &User| { &m.uid },
                |m: &mut User| { &mut m.uid },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "name",
                |m: &User| { &m.name },
                |m: &mut User| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "online",
                |m: &User| { &m.online },
                |m: &mut User| { &mut m.online },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "usr_attri",
                |m: &User| { &m.usr_attri },
                |m: &mut User| { &mut m.usr_attri },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "number",
                |m: &User| { &m.number },
                |m: &mut User| { &mut m.number },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<User>(
                "LoginAck.User",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for User {
        const NAME: &'static str = "User";

        fn is_initialized(&self) -> bool {
            if self.uid.is_none() {
                return false;
            }
            if self.name.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.uid = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.name = ::std::option::Option::Some(is.read_string()?);
                    },
                    24 => {
                        self.online = ::std::option::Option::Some(is.read_bool()?);
                    },
                    32 => {
                        self.usr_attri = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    42 => {
                        self.number = ::std::option::Option::Some(is.read_string()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.uid {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.name.as_ref() {
                my_size += ::protobuf::rt::string_size(2, &v);
            }
            if let Some(v) = self.online {
                my_size += 1 + 1;
            }
            if let Some(v) = self.usr_attri {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.number.as_ref() {
                my_size += ::protobuf::rt::string_size(5, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.uid {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.name.as_ref() {
                os.write_string(2, v)?;
            }
            if let Some(v) = self.online {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.usr_attri {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.number.as_ref() {
                os.write_string(5, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> User {
            User::new()
        }

        fn clear(&mut self) {
            self.uid = ::std::option::Option::None;
            self.name = ::std::option::Option::None;
            self.online = ::std::option::Option::None;
            self.usr_attri = ::std::option::Option::None;
            self.number = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static User {
            static instance: User = User {
                uid: ::std::option::Option::None,
                name: ::std::option::Option::None,
                online: ::std::option::Option::None,
                usr_attri: ::std::option::Option::None,
                number: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for User {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("LoginAck.User").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for User {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for User {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    // @@protoc_insertion_point(message:mypackage.LoginAck.Configure)
    #[derive(PartialEq,Clone,Default,Debug)]
    pub struct Configure {
        // message fields
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.default_group)
        pub default_group: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.loc_report_period)
        pub loc_report_period: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.audio_enabled)
        pub audio_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.cfg_ptt_timeout)
        pub cfg_ptt_timeout: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.heart_inter)
        pub heart_inter: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.video_enabled)
        pub video_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.task_enabled)
        pub task_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.report_enabled)
        pub report_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.sos_enabled)
        pub sos_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.elecfence_enabled)
        pub elecfence_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.message_enabled)
        pub message_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.mcu_enabled)
        pub mcu_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.audiodispatch_enabled)
        pub audiodispatch_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.map_enabled)
        pub map_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.patrol_enabled)
        pub patrol_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.drill_enabled)
        pub drill_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.playfile_enabled)
        pub playfile_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.recording_enabled)
        pub recording_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.siprecording_enabled)
        pub siprecording_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.callrecord_enabled)
        pub callrecord_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.infostatistics_enabled)
        pub infostatistics_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.customize_enabled)
        pub customize_enabled: ::std::option::Option<bool>,
        // @@protoc_insertion_point(field:mypackage.LoginAck.Configure.thirdmcu_enabled)
        pub thirdmcu_enabled: ::std::option::Option<bool>,
        // special fields
        // @@protoc_insertion_point(special_field:mypackage.LoginAck.Configure.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Configure {
        fn default() -> &'a Configure {
            <Configure as ::protobuf::Message>::default_instance()
        }
    }

    impl Configure {
        pub fn new() -> Configure {
            ::std::default::Default::default()
        }

        // required uint32 default_group = 1;

        pub fn default_group(&self) -> u32 {
            self.default_group.unwrap_or(0)
        }

        pub fn clear_default_group(&mut self) {
            self.default_group = ::std::option::Option::None;
        }

        pub fn has_default_group(&self) -> bool {
            self.default_group.is_some()
        }

        // Param is passed by value, moved
        pub fn set_default_group(&mut self, v: u32) {
            self.default_group = ::std::option::Option::Some(v);
        }

        // optional uint32 loc_report_period = 2;

        pub fn loc_report_period(&self) -> u32 {
            self.loc_report_period.unwrap_or(0)
        }

        pub fn clear_loc_report_period(&mut self) {
            self.loc_report_period = ::std::option::Option::None;
        }

        pub fn has_loc_report_period(&self) -> bool {
            self.loc_report_period.is_some()
        }

        // Param is passed by value, moved
        pub fn set_loc_report_period(&mut self, v: u32) {
            self.loc_report_period = ::std::option::Option::Some(v);
        }

        // optional bool audio_enabled = 3;

        pub fn audio_enabled(&self) -> bool {
            self.audio_enabled.unwrap_or(true)
        }

        pub fn clear_audio_enabled(&mut self) {
            self.audio_enabled = ::std::option::Option::None;
        }

        pub fn has_audio_enabled(&self) -> bool {
            self.audio_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_audio_enabled(&mut self, v: bool) {
            self.audio_enabled = ::std::option::Option::Some(v);
        }

        // optional uint32 cfg_ptt_timeout = 4;

        pub fn cfg_ptt_timeout(&self) -> u32 {
            self.cfg_ptt_timeout.unwrap_or(0)
        }

        pub fn clear_cfg_ptt_timeout(&mut self) {
            self.cfg_ptt_timeout = ::std::option::Option::None;
        }

        pub fn has_cfg_ptt_timeout(&self) -> bool {
            self.cfg_ptt_timeout.is_some()
        }

        // Param is passed by value, moved
        pub fn set_cfg_ptt_timeout(&mut self, v: u32) {
            self.cfg_ptt_timeout = ::std::option::Option::Some(v);
        }

        // optional uint32 heart_inter = 5;

        pub fn heart_inter(&self) -> u32 {
            self.heart_inter.unwrap_or(0)
        }

        pub fn clear_heart_inter(&mut self) {
            self.heart_inter = ::std::option::Option::None;
        }

        pub fn has_heart_inter(&self) -> bool {
            self.heart_inter.is_some()
        }

        // Param is passed by value, moved
        pub fn set_heart_inter(&mut self, v: u32) {
            self.heart_inter = ::std::option::Option::Some(v);
        }

        // optional bool video_enabled = 6;

        pub fn video_enabled(&self) -> bool {
            self.video_enabled.unwrap_or(false)
        }

        pub fn clear_video_enabled(&mut self) {
            self.video_enabled = ::std::option::Option::None;
        }

        pub fn has_video_enabled(&self) -> bool {
            self.video_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_video_enabled(&mut self, v: bool) {
            self.video_enabled = ::std::option::Option::Some(v);
        }

        // optional bool task_enabled = 7;

        pub fn task_enabled(&self) -> bool {
            self.task_enabled.unwrap_or(false)
        }

        pub fn clear_task_enabled(&mut self) {
            self.task_enabled = ::std::option::Option::None;
        }

        pub fn has_task_enabled(&self) -> bool {
            self.task_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_task_enabled(&mut self, v: bool) {
            self.task_enabled = ::std::option::Option::Some(v);
        }

        // optional bool report_enabled = 8;

        pub fn report_enabled(&self) -> bool {
            self.report_enabled.unwrap_or(false)
        }

        pub fn clear_report_enabled(&mut self) {
            self.report_enabled = ::std::option::Option::None;
        }

        pub fn has_report_enabled(&self) -> bool {
            self.report_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_report_enabled(&mut self, v: bool) {
            self.report_enabled = ::std::option::Option::Some(v);
        }

        // optional bool sos_enabled = 9;

        pub fn sos_enabled(&self) -> bool {
            self.sos_enabled.unwrap_or(false)
        }

        pub fn clear_sos_enabled(&mut self) {
            self.sos_enabled = ::std::option::Option::None;
        }

        pub fn has_sos_enabled(&self) -> bool {
            self.sos_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_sos_enabled(&mut self, v: bool) {
            self.sos_enabled = ::std::option::Option::Some(v);
        }

        // optional bool elecfence_enabled = 10;

        pub fn elecfence_enabled(&self) -> bool {
            self.elecfence_enabled.unwrap_or(false)
        }

        pub fn clear_elecfence_enabled(&mut self) {
            self.elecfence_enabled = ::std::option::Option::None;
        }

        pub fn has_elecfence_enabled(&self) -> bool {
            self.elecfence_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_elecfence_enabled(&mut self, v: bool) {
            self.elecfence_enabled = ::std::option::Option::Some(v);
        }

        // optional bool message_enabled = 11;

        pub fn message_enabled(&self) -> bool {
            self.message_enabled.unwrap_or(false)
        }

        pub fn clear_message_enabled(&mut self) {
            self.message_enabled = ::std::option::Option::None;
        }

        pub fn has_message_enabled(&self) -> bool {
            self.message_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_message_enabled(&mut self, v: bool) {
            self.message_enabled = ::std::option::Option::Some(v);
        }

        // optional bool mcu_enabled = 12;

        pub fn mcu_enabled(&self) -> bool {
            self.mcu_enabled.unwrap_or(false)
        }

        pub fn clear_mcu_enabled(&mut self) {
            self.mcu_enabled = ::std::option::Option::None;
        }

        pub fn has_mcu_enabled(&self) -> bool {
            self.mcu_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_mcu_enabled(&mut self, v: bool) {
            self.mcu_enabled = ::std::option::Option::Some(v);
        }

        // optional bool audiodispatch_enabled = 13;

        pub fn audiodispatch_enabled(&self) -> bool {
            self.audiodispatch_enabled.unwrap_or(false)
        }

        pub fn clear_audiodispatch_enabled(&mut self) {
            self.audiodispatch_enabled = ::std::option::Option::None;
        }

        pub fn has_audiodispatch_enabled(&self) -> bool {
            self.audiodispatch_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_audiodispatch_enabled(&mut self, v: bool) {
            self.audiodispatch_enabled = ::std::option::Option::Some(v);
        }

        // optional bool map_enabled = 14;

        pub fn map_enabled(&self) -> bool {
            self.map_enabled.unwrap_or(false)
        }

        pub fn clear_map_enabled(&mut self) {
            self.map_enabled = ::std::option::Option::None;
        }

        pub fn has_map_enabled(&self) -> bool {
            self.map_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_map_enabled(&mut self, v: bool) {
            self.map_enabled = ::std::option::Option::Some(v);
        }

        // optional bool patrol_enabled = 15;

        pub fn patrol_enabled(&self) -> bool {
            self.patrol_enabled.unwrap_or(false)
        }

        pub fn clear_patrol_enabled(&mut self) {
            self.patrol_enabled = ::std::option::Option::None;
        }

        pub fn has_patrol_enabled(&self) -> bool {
            self.patrol_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_patrol_enabled(&mut self, v: bool) {
            self.patrol_enabled = ::std::option::Option::Some(v);
        }

        // optional bool drill_enabled = 16;

        pub fn drill_enabled(&self) -> bool {
            self.drill_enabled.unwrap_or(false)
        }

        pub fn clear_drill_enabled(&mut self) {
            self.drill_enabled = ::std::option::Option::None;
        }

        pub fn has_drill_enabled(&self) -> bool {
            self.drill_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_drill_enabled(&mut self, v: bool) {
            self.drill_enabled = ::std::option::Option::Some(v);
        }

        // optional bool playfile_enabled = 17;

        pub fn playfile_enabled(&self) -> bool {
            self.playfile_enabled.unwrap_or(false)
        }

        pub fn clear_playfile_enabled(&mut self) {
            self.playfile_enabled = ::std::option::Option::None;
        }

        pub fn has_playfile_enabled(&self) -> bool {
            self.playfile_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_playfile_enabled(&mut self, v: bool) {
            self.playfile_enabled = ::std::option::Option::Some(v);
        }

        // optional bool recording_enabled = 18;

        pub fn recording_enabled(&self) -> bool {
            self.recording_enabled.unwrap_or(false)
        }

        pub fn clear_recording_enabled(&mut self) {
            self.recording_enabled = ::std::option::Option::None;
        }

        pub fn has_recording_enabled(&self) -> bool {
            self.recording_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_recording_enabled(&mut self, v: bool) {
            self.recording_enabled = ::std::option::Option::Some(v);
        }

        // optional bool siprecording_enabled = 19;

        pub fn siprecording_enabled(&self) -> bool {
            self.siprecording_enabled.unwrap_or(false)
        }

        pub fn clear_siprecording_enabled(&mut self) {
            self.siprecording_enabled = ::std::option::Option::None;
        }

        pub fn has_siprecording_enabled(&self) -> bool {
            self.siprecording_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_siprecording_enabled(&mut self, v: bool) {
            self.siprecording_enabled = ::std::option::Option::Some(v);
        }

        // optional bool callrecord_enabled = 20;

        pub fn callrecord_enabled(&self) -> bool {
            self.callrecord_enabled.unwrap_or(false)
        }

        pub fn clear_callrecord_enabled(&mut self) {
            self.callrecord_enabled = ::std::option::Option::None;
        }

        pub fn has_callrecord_enabled(&self) -> bool {
            self.callrecord_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_callrecord_enabled(&mut self, v: bool) {
            self.callrecord_enabled = ::std::option::Option::Some(v);
        }

        // optional bool infostatistics_enabled = 21;

        pub fn infostatistics_enabled(&self) -> bool {
            self.infostatistics_enabled.unwrap_or(false)
        }

        pub fn clear_infostatistics_enabled(&mut self) {
            self.infostatistics_enabled = ::std::option::Option::None;
        }

        pub fn has_infostatistics_enabled(&self) -> bool {
            self.infostatistics_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_infostatistics_enabled(&mut self, v: bool) {
            self.infostatistics_enabled = ::std::option::Option::Some(v);
        }

        // optional bool customize_enabled = 22;

        pub fn customize_enabled(&self) -> bool {
            self.customize_enabled.unwrap_or(false)
        }

        pub fn clear_customize_enabled(&mut self) {
            self.customize_enabled = ::std::option::Option::None;
        }

        pub fn has_customize_enabled(&self) -> bool {
            self.customize_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_customize_enabled(&mut self, v: bool) {
            self.customize_enabled = ::std::option::Option::Some(v);
        }

        // optional bool thirdmcu_enabled = 23;

        pub fn thirdmcu_enabled(&self) -> bool {
            self.thirdmcu_enabled.unwrap_or(false)
        }

        pub fn clear_thirdmcu_enabled(&mut self) {
            self.thirdmcu_enabled = ::std::option::Option::None;
        }

        pub fn has_thirdmcu_enabled(&self) -> bool {
            self.thirdmcu_enabled.is_some()
        }

        // Param is passed by value, moved
        pub fn set_thirdmcu_enabled(&mut self, v: bool) {
            self.thirdmcu_enabled = ::std::option::Option::Some(v);
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(23);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "default_group",
                |m: &Configure| { &m.default_group },
                |m: &mut Configure| { &mut m.default_group },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "loc_report_period",
                |m: &Configure| { &m.loc_report_period },
                |m: &mut Configure| { &mut m.loc_report_period },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "audio_enabled",
                |m: &Configure| { &m.audio_enabled },
                |m: &mut Configure| { &mut m.audio_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "cfg_ptt_timeout",
                |m: &Configure| { &m.cfg_ptt_timeout },
                |m: &mut Configure| { &mut m.cfg_ptt_timeout },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "heart_inter",
                |m: &Configure| { &m.heart_inter },
                |m: &mut Configure| { &mut m.heart_inter },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "video_enabled",
                |m: &Configure| { &m.video_enabled },
                |m: &mut Configure| { &mut m.video_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "task_enabled",
                |m: &Configure| { &m.task_enabled },
                |m: &mut Configure| { &mut m.task_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "report_enabled",
                |m: &Configure| { &m.report_enabled },
                |m: &mut Configure| { &mut m.report_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "sos_enabled",
                |m: &Configure| { &m.sos_enabled },
                |m: &mut Configure| { &mut m.sos_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "elecfence_enabled",
                |m: &Configure| { &m.elecfence_enabled },
                |m: &mut Configure| { &mut m.elecfence_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "message_enabled",
                |m: &Configure| { &m.message_enabled },
                |m: &mut Configure| { &mut m.message_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "mcu_enabled",
                |m: &Configure| { &m.mcu_enabled },
                |m: &mut Configure| { &mut m.mcu_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "audiodispatch_enabled",
                |m: &Configure| { &m.audiodispatch_enabled },
                |m: &mut Configure| { &mut m.audiodispatch_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "map_enabled",
                |m: &Configure| { &m.map_enabled },
                |m: &mut Configure| { &mut m.map_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "patrol_enabled",
                |m: &Configure| { &m.patrol_enabled },
                |m: &mut Configure| { &mut m.patrol_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "drill_enabled",
                |m: &Configure| { &m.drill_enabled },
                |m: &mut Configure| { &mut m.drill_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "playfile_enabled",
                |m: &Configure| { &m.playfile_enabled },
                |m: &mut Configure| { &mut m.playfile_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "recording_enabled",
                |m: &Configure| { &m.recording_enabled },
                |m: &mut Configure| { &mut m.recording_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "siprecording_enabled",
                |m: &Configure| { &m.siprecording_enabled },
                |m: &mut Configure| { &mut m.siprecording_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "callrecord_enabled",
                |m: &Configure| { &m.callrecord_enabled },
                |m: &mut Configure| { &mut m.callrecord_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "infostatistics_enabled",
                |m: &Configure| { &m.infostatistics_enabled },
                |m: &mut Configure| { &mut m.infostatistics_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "customize_enabled",
                |m: &Configure| { &m.customize_enabled },
                |m: &mut Configure| { &mut m.customize_enabled },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "thirdmcu_enabled",
                |m: &Configure| { &m.thirdmcu_enabled },
                |m: &mut Configure| { &mut m.thirdmcu_enabled },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Configure>(
                "LoginAck.Configure",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Configure {
        const NAME: &'static str = "Configure";

        fn is_initialized(&self) -> bool {
            if self.default_group.is_none() {
                return false;
            }
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.default_group = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    16 => {
                        self.loc_report_period = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    24 => {
                        self.audio_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    32 => {
                        self.cfg_ptt_timeout = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    40 => {
                        self.heart_inter = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    48 => {
                        self.video_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    56 => {
                        self.task_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    64 => {
                        self.report_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    72 => {
                        self.sos_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    80 => {
                        self.elecfence_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    88 => {
                        self.message_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    96 => {
                        self.mcu_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    104 => {
                        self.audiodispatch_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    112 => {
                        self.map_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    120 => {
                        self.patrol_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    128 => {
                        self.drill_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    136 => {
                        self.playfile_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    144 => {
                        self.recording_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    152 => {
                        self.siprecording_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    160 => {
                        self.callrecord_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    168 => {
                        self.infostatistics_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    176 => {
                        self.customize_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    184 => {
                        self.thirdmcu_enabled = ::std::option::Option::Some(is.read_bool()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.default_group {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.loc_report_period {
                my_size += ::protobuf::rt::uint32_size(2, v);
            }
            if let Some(v) = self.audio_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.cfg_ptt_timeout {
                my_size += ::protobuf::rt::uint32_size(4, v);
            }
            if let Some(v) = self.heart_inter {
                my_size += ::protobuf::rt::uint32_size(5, v);
            }
            if let Some(v) = self.video_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.task_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.report_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.sos_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.elecfence_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.message_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.mcu_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.audiodispatch_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.map_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.patrol_enabled {
                my_size += 1 + 1;
            }
            if let Some(v) = self.drill_enabled {
                my_size += 2 + 1;
            }
            if let Some(v) = self.playfile_enabled {
                my_size += 2 + 1;
            }
            if let Some(v) = self.recording_enabled {
                my_size += 2 + 1;
            }
            if let Some(v) = self.siprecording_enabled {
                my_size += 2 + 1;
            }
            if let Some(v) = self.callrecord_enabled {
                my_size += 2 + 1;
            }
            if let Some(v) = self.infostatistics_enabled {
                my_size += 2 + 1;
            }
            if let Some(v) = self.customize_enabled {
                my_size += 2 + 1;
            }
            if let Some(v) = self.thirdmcu_enabled {
                my_size += 2 + 1;
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.default_group {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.loc_report_period {
                os.write_uint32(2, v)?;
            }
            if let Some(v) = self.audio_enabled {
                os.write_bool(3, v)?;
            }
            if let Some(v) = self.cfg_ptt_timeout {
                os.write_uint32(4, v)?;
            }
            if let Some(v) = self.heart_inter {
                os.write_uint32(5, v)?;
            }
            if let Some(v) = self.video_enabled {
                os.write_bool(6, v)?;
            }
            if let Some(v) = self.task_enabled {
                os.write_bool(7, v)?;
            }
            if let Some(v) = self.report_enabled {
                os.write_bool(8, v)?;
            }
            if let Some(v) = self.sos_enabled {
                os.write_bool(9, v)?;
            }
            if let Some(v) = self.elecfence_enabled {
                os.write_bool(10, v)?;
            }
            if let Some(v) = self.message_enabled {
                os.write_bool(11, v)?;
            }
            if let Some(v) = self.mcu_enabled {
                os.write_bool(12, v)?;
            }
            if let Some(v) = self.audiodispatch_enabled {
                os.write_bool(13, v)?;
            }
            if let Some(v) = self.map_enabled {
                os.write_bool(14, v)?;
            }
            if let Some(v) = self.patrol_enabled {
                os.write_bool(15, v)?;
            }
            if let Some(v) = self.drill_enabled {
                os.write_bool(16, v)?;
            }
            if let Some(v) = self.playfile_enabled {
                os.write_bool(17, v)?;
            }
            if let Some(v) = self.recording_enabled {
                os.write_bool(18, v)?;
            }
            if let Some(v) = self.siprecording_enabled {
                os.write_bool(19, v)?;
            }
            if let Some(v) = self.callrecord_enabled {
                os.write_bool(20, v)?;
            }
            if let Some(v) = self.infostatistics_enabled {
                os.write_bool(21, v)?;
            }
            if let Some(v) = self.customize_enabled {
                os.write_bool(22, v)?;
            }
            if let Some(v) = self.thirdmcu_enabled {
                os.write_bool(23, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Configure {
            Configure::new()
        }

        fn clear(&mut self) {
            self.default_group = ::std::option::Option::None;
            self.loc_report_period = ::std::option::Option::None;
            self.audio_enabled = ::std::option::Option::None;
            self.cfg_ptt_timeout = ::std::option::Option::None;
            self.heart_inter = ::std::option::Option::None;
            self.video_enabled = ::std::option::Option::None;
            self.task_enabled = ::std::option::Option::None;
            self.report_enabled = ::std::option::Option::None;
            self.sos_enabled = ::std::option::Option::None;
            self.elecfence_enabled = ::std::option::Option::None;
            self.message_enabled = ::std::option::Option::None;
            self.mcu_enabled = ::std::option::Option::None;
            self.audiodispatch_enabled = ::std::option::Option::None;
            self.map_enabled = ::std::option::Option::None;
            self.patrol_enabled = ::std::option::Option::None;
            self.drill_enabled = ::std::option::Option::None;
            self.playfile_enabled = ::std::option::Option::None;
            self.recording_enabled = ::std::option::Option::None;
            self.siprecording_enabled = ::std::option::Option::None;
            self.callrecord_enabled = ::std::option::Option::None;
            self.infostatistics_enabled = ::std::option::Option::None;
            self.customize_enabled = ::std::option::Option::None;
            self.thirdmcu_enabled = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Configure {
            static instance: Configure = Configure {
                default_group: ::std::option::Option::None,
                loc_report_period: ::std::option::Option::None,
                audio_enabled: ::std::option::Option::None,
                cfg_ptt_timeout: ::std::option::Option::None,
                heart_inter: ::std::option::Option::None,
                video_enabled: ::std::option::Option::None,
                task_enabled: ::std::option::Option::None,
                report_enabled: ::std::option::Option::None,
                sos_enabled: ::std::option::Option::None,
                elecfence_enabled: ::std::option::Option::None,
                message_enabled: ::std::option::Option::None,
                mcu_enabled: ::std::option::Option::None,
                audiodispatch_enabled: ::std::option::Option::None,
                map_enabled: ::std::option::Option::None,
                patrol_enabled: ::std::option::Option::None,
                drill_enabled: ::std::option::Option::None,
                playfile_enabled: ::std::option::Option::None,
                recording_enabled: ::std::option::Option::None,
                siprecording_enabled: ::std::option::Option::None,
                callrecord_enabled: ::std::option::Option::None,
                infostatistics_enabled: ::std::option::Option::None,
                customize_enabled: ::std::option::Option::None,
                thirdmcu_enabled: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Configure {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("LoginAck.Configure").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Configure {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Configure {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

// @@protoc_insertion_point(message:mypackage.Logout)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Logout {
    // special fields
    // @@protoc_insertion_point(special_field:mypackage.Logout.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Logout {
    fn default() -> &'a Logout {
        <Logout as ::protobuf::Message>::default_instance()
    }
}

impl Logout {
    pub fn new() -> Logout {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Logout>(
            "Logout",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Logout {
    const NAME: &'static str = "Logout";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Logout {
        Logout::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Logout {
        static instance: Logout = Logout {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Logout {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Logout").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Logout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Logout {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:mypackage.LogoutAck)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LogoutAck {
    // message fields
    // @@protoc_insertion_point(field:mypackage.LogoutAck.result)
    pub result: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:mypackage.LogoutAck.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LogoutAck {
    fn default() -> &'a LogoutAck {
        <LogoutAck as ::protobuf::Message>::default_instance()
    }
}

impl LogoutAck {
    pub fn new() -> LogoutAck {
        ::std::default::Default::default()
    }

    // required int32 result = 1;

    pub fn result(&self) -> i32 {
        self.result.unwrap_or(0)
    }

    pub fn clear_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: i32) {
        self.result = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "result",
            |m: &LogoutAck| { &m.result },
            |m: &mut LogoutAck| { &mut m.result },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LogoutAck>(
            "LogoutAck",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LogoutAck {
    const NAME: &'static str = "LogoutAck";

    fn is_initialized(&self) -> bool {
        if self.result.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.result = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.result {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.result {
            os.write_int32(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LogoutAck {
        LogoutAck::new()
    }

    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LogoutAck {
        static instance: LogoutAck = LogoutAck {
            result: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LogoutAck {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LogoutAck").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LogoutAck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogoutAck {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:mypackage.Kickout)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Kickout {
    // message fields
    // @@protoc_insertion_point(field:mypackage.Kickout.reason)
    pub reason: ::std::option::Option<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:mypackage.Kickout.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Kickout {
    fn default() -> &'a Kickout {
        <Kickout as ::protobuf::Message>::default_instance()
    }
}

impl Kickout {
    pub fn new() -> Kickout {
        ::std::default::Default::default()
    }

    // required string reason = 1;

    pub fn reason(&self) -> &str {
        match self.reason.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_reason(&mut self) {
        self.reason = ::std::option::Option::None;
    }

    pub fn has_reason(&self) -> bool {
        self.reason.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        if self.reason.is_none() {
            self.reason = ::std::option::Option::Some(::std::string::String::new());
        }
        self.reason.as_mut().unwrap()
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        self.reason.take().unwrap_or_else(|| ::std::string::String::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "reason",
            |m: &Kickout| { &m.reason },
            |m: &mut Kickout| { &mut m.reason },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Kickout>(
            "Kickout",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Kickout {
    const NAME: &'static str = "Kickout";

    fn is_initialized(&self) -> bool {
        if self.reason.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.reason = ::std::option::Option::Some(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.reason.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.reason.as_ref() {
            os.write_string(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Kickout {
        Kickout::new()
    }

    fn clear(&mut self) {
        self.reason = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Kickout {
        static instance: Kickout = Kickout {
            reason: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Kickout {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Kickout").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Kickout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Kickout {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0blogin.proto\x12\tmypackage\"\xcb\x01\n\x05Login\x12\x18\n\x07accou\
    nt\x18\x01\x20\x02(\tR\x07account\x12\x1a\n\x08password\x18\x02\x20\x01(\
    \tR\x08password\x12\x18\n\x07version\x18\x03\x20\x01(\x05R\x07version\
    \x12\x1a\n\x08platform\x18\x04\x20\x02(\tR\x08platform\x12\x16\n\x06devi\
    ce\x18\x05\x20\x02(\tR\x06device\x12\x12\n\x04meid\x18\x06\x20\x01(\tR\
    \x04meid\x12*\n\x0eexpect_payload\x18\x07\x20\x01(\r:\x03101R\rexpectPay\
    load\"\xbf\n\n\x08LoginAck\x12\x16\n\x06result\x18\x01\x20\x02(\x05R\x06\
    result\x12*\n\x03usr\x18\x02\x20\x02(\x0b2\x18.mypackage.LoginAck.UserR\
    \x03usr\x121\n\x04conf\x18\x03\x20\x02(\x0b2\x1d.mypackage.LoginAck.Conf\
    igureR\x04conf\x1ay\n\x04User\x12\x10\n\x03uid\x18\x01\x20\x02(\rR\x03ui\
    d\x12\x12\n\x04name\x18\x02\x20\x02(\tR\x04name\x12\x16\n\x06online\x18\
    \x03\x20\x01(\x08R\x06online\x12\x1b\n\tusr_attri\x18\x04\x20\x01(\rR\
    \x08usrAttri\x12\x16\n\x06number\x18\x05\x20\x01(\tR\x06number\x1a\xc0\
    \x08\n\tConfigure\x12#\n\rdefault_group\x18\x01\x20\x02(\rR\x0cdefaultGr\
    oup\x12*\n\x11loc_report_period\x18\x02\x20\x01(\rR\x0flocReportPeriod\
    \x12)\n\raudio_enabled\x18\x03\x20\x01(\x08:\x04trueR\x0caudioEnabled\
    \x12&\n\x0fcfg_ptt_timeout\x18\x04\x20\x01(\rR\rcfgPttTimeout\x12\x1f\n\
    \x0bheart_inter\x18\x05\x20\x01(\rR\nheartInter\x12*\n\rvideo_enabled\
    \x18\x06\x20\x01(\x08:\x05falseR\x0cvideoEnabled\x12(\n\x0ctask_enabled\
    \x18\x07\x20\x01(\x08:\x05falseR\x0btaskEnabled\x12,\n\x0ereport_enabled\
    \x18\x08\x20\x01(\x08:\x05falseR\rreportEnabled\x12&\n\x0bsos_enabled\
    \x18\t\x20\x01(\x08:\x05falseR\nsosEnabled\x122\n\x11elecfence_enabled\
    \x18\n\x20\x01(\x08:\x05falseR\x10elecfenceEnabled\x12.\n\x0fmessage_ena\
    bled\x18\x0b\x20\x01(\x08:\x05falseR\x0emessageEnabled\x12&\n\x0bmcu_ena\
    bled\x18\x0c\x20\x01(\x08:\x05falseR\nmcuEnabled\x12:\n\x15audiodispatch\
    _enabled\x18\r\x20\x01(\x08:\x05falseR\x14audiodispatchEnabled\x12&\n\
    \x0bmap_enabled\x18\x0e\x20\x01(\x08:\x05falseR\nmapEnabled\x12,\n\x0epa\
    trol_enabled\x18\x0f\x20\x01(\x08:\x05falseR\rpatrolEnabled\x12*\n\rdril\
    l_enabled\x18\x10\x20\x01(\x08:\x05falseR\x0cdrillEnabled\x120\n\x10play\
    file_enabled\x18\x11\x20\x01(\x08:\x05falseR\x0fplayfileEnabled\x122\n\
    \x11recording_enabled\x18\x12\x20\x01(\x08:\x05falseR\x10recordingEnable\
    d\x128\n\x14siprecording_enabled\x18\x13\x20\x01(\x08:\x05falseR\x13sipr\
    ecordingEnabled\x124\n\x12callrecord_enabled\x18\x14\x20\x01(\x08:\x05fa\
    lseR\x11callrecordEnabled\x12<\n\x16infostatistics_enabled\x18\x15\x20\
    \x01(\x08:\x05falseR\x15infostatisticsEnabled\x122\n\x11customize_enable\
    d\x18\x16\x20\x01(\x08:\x05falseR\x10customizeEnabled\x120\n\x10thirdmcu\
    _enabled\x18\x17\x20\x01(\x08:\x05falseR\x0fthirdmcuEnabled\"\x08\n\x06L\
    ogout\"#\n\tLogoutAck\x12\x16\n\x06result\x18\x01\x20\x02(\x05R\x06resul\
    t\"!\n\x07Kickout\x12\x16\n\x06reason\x18\x01\x20\x02(\tR\x06reasonJ\x97\
    '\n\x06\x12\x04\0\0C\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\0\x12\n\n\n\x02\x04\0\x12\x04\x04\0\x0c\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x04\x08\r\n\x18\n\x04\x04\0\x02\0\x12\x03\x05\x02\x1e\"\x0b\
    \xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\r\n\n\x0c\n\x05\x04\0\x02\0\x04\x12\
    \x03\x05\x02\n\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x0b\x11\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x05\x12\x19\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x05\x1c\x1d\n$\n\x04\x04\0\x02\x01\x12\x03\x06\x02\x1f\"\x17\xe5\
    \xaf\x86\xe7\xa0\x81\xef\xbc\x8c\xe9\xbb\x98\xe8\xae\xa4\xe6\xb2\xa1\xe6\
    \x9c\x89\r\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03\x06\x02\n\n\x0c\n\x05\
    \x04\0\x02\x01\x05\x12\x03\x06\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\
    \x03\x06\x12\x1a\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x1d\x1e\n\x1b\
    \n\x04\x04\0\x02\x02\x12\x03\x07\x02\x1d\"\x0e\xe7\x89\x88\xe6\x9c\xac\
    \xe5\x8f\xb7\xe7\xa0\x81\r\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03\x07\
    \x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x0b\x10\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03\x07\x11\x18\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x07\x1b\x1c\n\x1b\n\x04\x04\0\x02\x03\x12\x03\x08\x02\x1f\"\x0e\x20\x20\
    \xe2\x80\x9cbrew\xe2\x80\x9d\r\n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\
    \x08\x02\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x08\x0b\x11\n\x0c\n\x05\
    \x04\0\x02\x03\x01\x12\x03\x08\x12\x1a\n\x0c\n\x05\x04\0\x02\x03\x03\x12\
    \x03\x08\x1d\x1e\nK\n\x04\x04\0\x02\x04\x12\x03\t\x02\x1d\">\x20\xe2\x80\
    \x9cMSxxx\xe2\x80\x9d\xef\xbc\x8c\xe5\x90\x8e\xe9\x9d\xa2\xe5\x8f\xaf\
    \xe8\x83\xbd\xe9\x9c\x80\xe8\xa6\x81\xe5\x8c\xba\xe5\x88\x86\xe6\x89\x8b\
    \xe6\x8c\x81\xe6\x9c\xba\xe8\xbf\x98\xe6\x98\xaf\xe8\xbd\xa6\xe6\x9c\xba\
    \r\n\n\x0c\n\x05\x04\0\x02\x04\x04\x12\x03\t\x02\n\n\x0c\n\x05\x04\0\x02\
    \x04\x05\x12\x03\t\x0b\x11\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\t\x12\
    \x18\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\t\x1b\x1c\n\x1a\n\x04\x04\0\
    \x02\x05\x12\x03\n\x02\x1b\"\r\x20meid\xe5\xad\x97\xe4\xb8\xb2\r\n\n\x0c\
    \n\x05\x04\0\x02\x05\x04\x12\x03\n\x02\n\n\x0c\n\x05\x04\0\x02\x05\x05\
    \x12\x03\n\x0b\x11\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\n\x12\x16\n\x0c\
    \n\x05\x04\0\x02\x05\x03\x12\x03\n\x19\x1a\n#\n\x04\x04\0\x02\x06\x12\
    \x03\x0b\x025\"\x16101\xe6\x8c\x87AMR,103\xe6\x98\xafEVRC\r\n\n\x0c\n\
    \x05\x04\0\x02\x06\x04\x12\x03\x0b\x02\n\n\x0c\n\x05\x04\0\x02\x06\x05\
    \x12\x03\x0b\x0b\x11\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x0b\x12\x20\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0b#$\n\x0c\n\x05\x04\0\x02\x06\x08\
    \x12\x03\x0b%4\n\x0c\n\x05\x04\0\x02\x06\x07\x12\x03\x0b03\n\n\n\x02\x04\
    \x01\x12\x04\x0e\08\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0e\x08\x10\n0\n\
    \x04\x04\x01\x02\0\x12\x03\x0f\x02\x1c\"#-1\xe4\xbb\xa3\xe8\xa1\xa8\xe5\
    \xa4\xb1\xe8\xb4\xa5\xef\xbc\x8c>=0\x20\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x88\
    \x90\xe5\x8a\x9f\r\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x0f\x02\n\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0f\x0b\x10\n\x0c\n\x05\x04\x01\x02\
    \0\x01\x12\x03\x0f\x11\x17\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0f\x1a\
    \x1b\n\x0c\n\x04\x04\x01\x03\0\x12\x04\x11\x02\x17\x03\n\x0c\n\x05\x04\
    \x01\x03\0\x01\x12\x03\x11\n\x0e\nL\n\x06\x04\x01\x03\0\x02\0\x12\x03\
    \x12\x04\x1c\"=user\x20ID,\xe7\x94\xa8\xe4\xba\x8e\xe5\x9c\xa8\xe4\xb8\
    \xbb\xe5\x8a\xa8\xe4\xb8\x8a\xe6\x8a\xa5\xe5\x85\xb6\xe4\xbb\x96\xe7\x94\
    \xa8\xe6\x88\xb7\xe7\x9a\x84\xe6\x97\xb6\xe5\x80\x99\xe7\x9a\x84\xe6\xa0\
    \x87\xe8\xaf\x86\r\n\n\x0e\n\x07\x04\x01\x03\0\x02\0\x04\x12\x03\x12\x04\
    \x0c\n\x0e\n\x07\x04\x01\x03\0\x02\0\x05\x12\x03\x12\r\x13\n\x0e\n\x07\
    \x04\x01\x03\0\x02\0\x01\x12\x03\x12\x14\x17\n\x0e\n\x07\x04\x01\x03\0\
    \x02\0\x03\x12\x03\x12\x1a\x1b\nV\n\x06\x04\x01\x03\0\x02\x01\x12\x03\
    \x13\x04\x1e\"Guser\xe7\x9a\x84name,\xe7\x94\xa8\xe4\xba\x8e\xe5\x9c\xa8\
    \xe4\xb8\xbb\xe5\x8a\xa8\xe4\xb8\x8a\xe6\x8a\xa5\xe5\x85\xb6\xe4\xbb\x96\
    \xe7\x94\xa8\xe6\x88\xb7\xe5\x90\x8d\xe7\xa7\xb0\xe7\x9a\x84\xe6\x97\xb6\
    \xe5\x80\x99\xe7\x9a\x84\xe6\xa0\x87\xe8\xaf\x86\r\n\n\x0e\n\x07\x04\x01\
    \x03\0\x02\x01\x04\x12\x03\x13\x04\x0c\n\x0e\n\x07\x04\x01\x03\0\x02\x01\
    \x05\x12\x03\x13\r\x13\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x01\x12\x03\x13\
    \x14\x18\n\x0e\n\x07\x04\x01\x03\0\x02\x01\x03\x12\x03\x13\x1c\x1d\n\x1f\
    \n\x06\x04\x01\x03\0\x02\x02\x12\x03\x14\x04\x1d\"\x10\xe5\x9c\xa8\xe7\
    \xba\xbf\xe7\x8a\xb6\xe6\x80\x81\x20\x20\r\n\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x02\x04\x12\x03\x14\x04\x0c\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x05\
    \x12\x03\x14\r\x11\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x01\x12\x03\x14\x12\
    \x18\n\x0e\n\x07\x04\x01\x03\0\x02\x02\x03\x12\x03\x14\x1b\x1c\n8\n\x06\
    \x04\x01\x03\0\x02\x03\x12\x03\x15\x04\"\")\xe7\x94\xa8\xe6\x88\xb7\xe5\
    \xb1\x9e\xe6\x80\xa7\xe8\xae\xbe\xe7\xbd\xae\xef\xbc\x8c\xe5\x85\x88\xe5\
    \x88\x9d\xe5\xa7\x8b\xe5\x8c\x96\xe4\xb8\xba1\x20\x20\r\n\n\x0e\n\x07\
    \x04\x01\x03\0\x02\x03\x04\x12\x03\x15\x04\x0c\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x03\x05\x12\x03\x15\r\x13\n\x0e\n\x07\x04\x01\x03\0\x02\x03\x01\x12\
    \x03\x15\x14\x1d\n\x0e\n\x07\x04\x01\x03\0\x02\x03\x03\x12\x03\x15\x20!\
    \n\x1e\n\x06\x04\x01\x03\0\x02\x04\x12\x03\x16\x04\x1f\"\x0f\x20\xe5\x88\
    \x86\xe6\x9c\xba\xe7\x9f\xad\xe5\x8f\xb7\r\n\n\x0e\n\x07\x04\x01\x03\0\
    \x02\x04\x04\x12\x03\x16\x04\x0c\n\x0e\n\x07\x04\x01\x03\0\x02\x04\x05\
    \x12\x03\x16\r\x13\n\x0e\n\x07\x04\x01\x03\0\x02\x04\x01\x12\x03\x16\x14\
    \x1a\n\x0e\n\x07\x04\x01\x03\0\x02\x04\x03\x12\x03\x16\x1d\x1e\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03\x19\x02\x19\n\x0c\n\x05\x04\x01\x02\x01\x04\
    \x12\x03\x19\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x19\x0b\x0f\n\
    \x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x19\x10\x13\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x19\x17\x18\n\x0c\n\x04\x04\x01\x03\x01\x12\x04\x1b\
    \x024\x03\n\x0c\n\x05\x04\x01\x03\x01\x01\x12\x03\x1b\n\x13\n\x1d\n\x06\
    \x04\x01\x03\x01\x02\0\x12\x03\x1c\x04&\"\x0e\xe9\xbb\x98\xe8\xae\xa4\
    \xe7\xbe\xa4\xe7\xbb\x84\r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x04\x12\
    \x03\x1c\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\0\x05\x12\x03\x1c\r\x13\
    \n\x0e\n\x07\x04\x01\x03\x01\x02\0\x01\x12\x03\x1c\x14!\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\0\x03\x12\x03\x1c$%\n\x20\n\x06\x04\x01\x03\x01\x02\x01\
    \x12\x03\x1d\x04*\"\x11GPS\xe4\xb8\x8a\xe6\x8a\xa5\xe5\x91\xa8\xe6\x9c\
    \x9f\r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\x01\x04\x12\x03\x1d\x04\x0c\n\
    \x0e\n\x07\x04\x01\x03\x01\x02\x01\x05\x12\x03\x1d\r\x13\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\x01\x01\x12\x03\x1d\x14%\n\x0e\n\x07\x04\x01\x03\x01\
    \x02\x01\x03\x12\x03\x1d()\n%\n\x06\x04\x01\x03\x01\x02\x02\x12\x03\x1e\
    \x045\"\x16\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\xe8\xaf\xb4\
    \xe8\xaf\x9d\x20\x20\r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\x02\x04\x12\x03\
    \x1e\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\x02\x05\x12\x03\x1e\r\x11\n\
    \x0e\n\x07\x04\x01\x03\x01\x02\x02\x01\x12\x03\x1e\x12\x1f\n\x0e\n\x07\
    \x04\x01\x03\x01\x02\x02\x03\x12\x03\x1e\"#\n\x0e\n\x07\x04\x01\x03\x01\
    \x02\x02\x08\x12\x03\x1e$4\n\x0e\n\x07\x04\x01\x03\x01\x02\x02\x07\x12\
    \x03\x1e/3\n/\n\x06\x04\x01\x03\x01\x02\x03\x12\x03\x1f\x04(\"\x20PTT\
    \xe8\xaf\x9d\xe8\xaf\xad\xe6\x9d\x83\xe4\xb8\x80\xe6\xac\xa1\xe6\x9c\x80\
    \xe9\x95\xbf\xe6\x97\xb6\xe9\x97\xb4\r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\
    \x03\x04\x12\x03\x1f\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\x03\x05\x12\
    \x03\x1f\r\x13\n\x0e\n\x07\x04\x01\x03\x01\x02\x03\x01\x12\x03\x1f\x14#\
    \n\x0e\n\x07\x04\x01\x03\x01\x02\x03\x03\x12\x03\x1f&'\n2\n\x06\x04\x01\
    \x03\x01\x02\x04\x12\x03\x20\x04%\"#\xe7\xbb\x88\xe7\xab\xafUDP\xe5\xbf\
    \x83\xe8\xb7\xb3\xe5\x8c\x85\xe7\x9a\x84\xe6\x97\xb6\xe9\x97\xb4\xe9\x97\
    \xb4\xe9\x9a\x94\r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\x04\x04\x12\x03\x20\
    \x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\x04\x05\x12\x03\x20\r\x13\n\x0e\
    \n\x07\x04\x01\x03\x01\x02\x04\x01\x12\x03\x20\x15\x20\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\x04\x03\x12\x03\x20#$\n)\n\x06\x04\x01\x03\x01\x02\x05\
    \x12\x03\"\x046\"\x1a\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\
    \xe8\xa7\x86\xe9\xa2\x91\xe4\xb8\x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\
    \x03\x01\x02\x05\x04\x12\x03\"\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\
    \x05\x05\x12\x03\"\r\x11\n\x0e\n\x07\x04\x01\x03\x01\x02\x05\x01\x12\x03\
    \"\x12\x1f\n\x0e\n\x07\x04\x01\x03\x01\x02\x05\x03\x12\x03\"\"#\n\x0e\n\
    \x07\x04\x01\x03\x01\x02\x05\x08\x12\x03\"$5\n\x0e\n\x07\x04\x01\x03\x01\
    \x02\x05\x07\x12\x03\"/4\n)\n\x06\x04\x01\x03\x01\x02\x06\x12\x03#\x045\
    \"\x1a\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\xe6\xb4\xbe\xe5\
    \x8d\x95\xe4\xb8\x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\x06\
    \x04\x12\x03#\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\x06\x05\x12\x03#\r\
    \x11\n\x0e\n\x07\x04\x01\x03\x01\x02\x06\x01\x12\x03#\x12\x1e\n\x0e\n\
    \x07\x04\x01\x03\x01\x02\x06\x03\x12\x03#!\"\n\x0e\n\x07\x04\x01\x03\x01\
    \x02\x06\x08\x12\x03##4\n\x0e\n\x07\x04\x01\x03\x01\x02\x06\x07\x12\x03#\
    .3\n)\n\x06\x04\x01\x03\x01\x02\x07\x12\x03$\x047\"\x1a\xe6\x98\xaf\xe5\
    \x90\xa6\xe5\x85\x81\xe8\xae\xb8\xe4\xb8\x8a\xe6\x8a\xa5\xe4\xb8\x9a\xe5\
    \x8a\xa1\r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\x07\x04\x12\x03$\x04\x0c\n\
    \x0e\n\x07\x04\x01\x03\x01\x02\x07\x05\x12\x03$\r\x11\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\x07\x01\x12\x03$\x12\x20\n\x0e\n\x07\x04\x01\x03\x01\
    \x02\x07\x03\x12\x03$#$\n\x0e\n\x07\x04\x01\x03\x01\x02\x07\x08\x12\x03$\
    %6\n\x0e\n\x07\x04\x01\x03\x01\x02\x07\x07\x12\x03$05\n&\n\x06\x04\x01\
    \x03\x01\x02\x08\x12\x03%\x044\"\x17\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\
    \xe8\xae\xb8sos\xe4\xb8\x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\x03\x01\
    \x02\x08\x04\x12\x03%\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\x08\x05\
    \x12\x03%\r\x11\n\x0e\n\x07\x04\x01\x03\x01\x02\x08\x01\x12\x03%\x12\x1d\
    \n\x0e\n\x07\x04\x01\x03\x01\x02\x08\x03\x12\x03%\x20!\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\x08\x08\x12\x03%\"3\n\x0e\n\x07\x04\x01\x03\x01\x02\x08\
    \x07\x12\x03%-2\n)\n\x06\x04\x01\x03\x01\x02\t\x12\x03&\x04;\"\x1a\xe6\
    \x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\xe5\x9b\xb4\xe6\xa0\x8f\xe4\
    \xb8\x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\t\x04\x12\x03&\
    \x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\t\x05\x12\x03&\r\x11\n\x0e\n\
    \x07\x04\x01\x03\x01\x02\t\x01\x12\x03&\x12#\n\x0e\n\x07\x04\x01\x03\x01\
    \x02\t\x03\x12\x03&&(\n\x0e\n\x07\x04\x01\x03\x01\x02\t\x08\x12\x03&):\n\
    \x0e\n\x07\x04\x01\x03\x01\x02\t\x07\x12\x03&49\n/\n\x06\x04\x01\x03\x01\
    \x02\n\x12\x03'\x049\"\x20\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\
    \xb8\xe5\x8d\xb3\xe6\x97\xb6\xe6\xb6\x88\xe6\x81\xaf\xe4\xb8\x9a\xe5\x8a\
    \xa1\r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\n\x04\x12\x03'\x04\x0c\n\x0e\n\
    \x07\x04\x01\x03\x01\x02\n\x05\x12\x03'\r\x11\n\x0e\n\x07\x04\x01\x03\
    \x01\x02\n\x01\x12\x03'\x12!\n\x0e\n\x07\x04\x01\x03\x01\x02\n\x03\x12\
    \x03'$&\n\x0e\n\x07\x04\x01\x03\x01\x02\n\x08\x12\x03''8\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\n\x07\x12\x03'27\n/\n\x06\x04\x01\x03\x01\x02\x0b\x12\
    \x03(\x045\"\x20\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\xe5\x8d\
    \xb3\xe6\x97\xb6\xe6\xb6\x88\xe6\x81\xaf\xe4\xb8\x9a\xe5\x8a\xa1\r\n\n\
    \x0e\n\x07\x04\x01\x03\x01\x02\x0b\x04\x12\x03(\x04\x0c\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\x0b\x05\x12\x03(\r\x11\n\x0e\n\x07\x04\x01\x03\x01\x02\
    \x0b\x01\x12\x03(\x12\x1d\n\x0e\n\x07\x04\x01\x03\x01\x02\x0b\x03\x12\
    \x03(\x20\"\n\x0e\n\x07\x04\x01\x03\x01\x02\x0b\x08\x12\x03(#4\n\x0e\n\
    \x07\x04\x01\x03\x01\x02\x0b\x07\x12\x03(.3\n/\n\x06\x04\x01\x03\x01\x02\
    \x0c\x12\x03)\x04?\"\x20\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\
    \xe5\x8d\xb3\xe6\x97\xb6\xe6\xb6\x88\xe6\x81\xaf\xe4\xb8\x9a\xe5\x8a\xa1\
    \r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\x0c\x04\x12\x03)\x04\x0c\n\x0e\n\
    \x07\x04\x01\x03\x01\x02\x0c\x05\x12\x03)\r\x11\n\x0e\n\x07\x04\x01\x03\
    \x01\x02\x0c\x01\x12\x03)\x12'\n\x0e\n\x07\x04\x01\x03\x01\x02\x0c\x03\
    \x12\x03)*,\n\x0e\n\x07\x04\x01\x03\x01\x02\x0c\x08\x12\x03)->\n\x0e\n\
    \x07\x04\x01\x03\x01\x02\x0c\x07\x12\x03)8=\n)\n\x06\x04\x01\x03\x01\x02\
    \r\x12\x03*\x045\"\x1a\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe5\x9c\xb0\
    \xe5\x9b\xbe\xe6\xa0\x8f\xe4\xb8\x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\
    \x03\x01\x02\r\x04\x12\x03*\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\r\
    \x05\x12\x03*\r\x11\n\x0e\n\x07\x04\x01\x03\x01\x02\r\x01\x12\x03*\x12\
    \x1d\n\x0e\n\x07\x04\x01\x03\x01\x02\r\x03\x12\x03*\x20\"\n\x0e\n\x07\
    \x04\x01\x03\x01\x02\r\x08\x12\x03*#4\n\x0e\n\x07\x04\x01\x03\x01\x02\r\
    \x07\x12\x03*.3\n#\n\x06\x04\x01\x03\x01\x02\x0e\x12\x03+\x048\"\x14\xe6\
    \x98\xaf\xe5\x90\xa6\xe5\xb7\xa1\xe6\xa3\x80\xe4\xb8\x9a\xe5\x8a\xa1\r\n\
    \n\x0e\n\x07\x04\x01\x03\x01\x02\x0e\x04\x12\x03+\x04\x0c\n\x0e\n\x07\
    \x04\x01\x03\x01\x02\x0e\x05\x12\x03+\r\x11\n\x0e\n\x07\x04\x01\x03\x01\
    \x02\x0e\x01\x12\x03+\x12\x20\n\x0e\n\x07\x04\x01\x03\x01\x02\x0e\x03\
    \x12\x03+#%\n\x0e\n\x07\x04\x01\x03\x01\x02\x0e\x08\x12\x03+&7\n\x0e\n\
    \x07\x04\x01\x03\x01\x02\x0e\x07\x12\x03+16\n)\n\x06\x04\x01\x03\x01\x02\
    \x0f\x12\x03,\x047\"\x1a\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe6\xbc\x94\
    \xe7\xbb\x83\xe6\xa0\x8f\xe4\xb8\x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\
    \x03\x01\x02\x0f\x04\x12\x03,\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\
    \x0f\x05\x12\x03,\r\x11\n\x0e\n\x07\x04\x01\x03\x01\x02\x0f\x01\x12\x03,\
    \x12\x1f\n\x0e\n\x07\x04\x01\x03\x01\x02\x0f\x03\x12\x03,\"$\n\x0e\n\x07\
    \x04\x01\x03\x01\x02\x0f\x08\x12\x03,%6\n\x0e\n\x07\x04\x01\x03\x01\x02\
    \x0f\x07\x12\x03,05\n/\n\x06\x04\x01\x03\x01\x02\x10\x12\x03-\x04:\"\x20\
    \xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe6\x96\x87\xe4\xbb\xb6\xe6\x92\xad\
    \xe6\x94\xbe\xe6\xa0\x8f\xe4\xb8\x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\
    \x03\x01\x02\x10\x04\x12\x03-\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\
    \x10\x05\x12\x03-\r\x11\n\x0e\n\x07\x04\x01\x03\x01\x02\x10\x01\x12\x03-\
    \x12\"\n\x0e\n\x07\x04\x01\x03\x01\x02\x10\x03\x12\x03-%'\n\x0e\n\x07\
    \x04\x01\x03\x01\x02\x10\x08\x12\x03-(9\n\x0e\n\x07\x04\x01\x03\x01\x02\
    \x10\x07\x12\x03-38\n/\n\x06\x04\x01\x03\x01\x02\x11\x12\x03.\x04;\"\x20\
    \xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\xe5\xaf\xb9\xe8\xae\xb2\
    \xe5\xbd\x95\xe9\x9f\xb3\xe4\xb8\x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\
    \x03\x01\x02\x11\x04\x12\x03.\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\
    \x11\x05\x12\x03.\r\x11\n\x0e\n\x07\x04\x01\x03\x01\x02\x11\x01\x12\x03.\
    \x12#\n\x0e\n\x07\x04\x01\x03\x01\x02\x11\x03\x12\x03.&(\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\x11\x08\x12\x03.):\n\x0e\n\x07\x04\x01\x03\x01\x02\x11\
    \x07\x12\x03.49\n/\n\x06\x04\x01\x03\x01\x02\x12\x12\x03/\x04>\"\x20\xe6\
    \x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\xe9\x80\x9a\xe8\xaf\x9d\xe5\
    \xbd\x95\xe5\x83\x8f\xe4\xb8\x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\x03\
    \x01\x02\x12\x04\x12\x03/\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\x12\
    \x05\x12\x03/\r\x11\n\x0e\n\x07\x04\x01\x03\x01\x02\x12\x01\x12\x03/\x12\
    &\n\x0e\n\x07\x04\x01\x03\x01\x02\x12\x03\x12\x03/)+\n\x0e\n\x07\x04\x01\
    \x03\x01\x02\x12\x08\x12\x03/,=\n\x0e\n\x07\x04\x01\x03\x01\x02\x12\x07\
    \x12\x03/7<\n/\n\x06\x04\x01\x03\x01\x02\x13\x12\x030\x04<\"\x20\xe6\x98\
    \xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\xb8\xe9\x80\x9a\xe8\xaf\x9d\xe8\xae\
    \xb0\xe5\xbd\x95\xe4\xb8\x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\x03\x01\
    \x02\x13\x04\x12\x030\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\x13\x05\
    \x12\x030\r\x11\n\x0e\n\x07\x04\x01\x03\x01\x02\x13\x01\x12\x030\x12$\n\
    \x0e\n\x07\x04\x01\x03\x01\x02\x13\x03\x12\x030')\n\x0e\n\x07\x04\x01\
    \x03\x01\x02\x13\x08\x12\x030*;\n\x0e\n\x07\x04\x01\x03\x01\x02\x13\x07\
    \x12\x0305:\n)\n\x06\x04\x01\x03\x01\x02\x14\x12\x031\x04@\"\x1a\xe6\x98\
    \xaf\xe5\x90\xa6\xe4\xbf\xa1\xe6\x81\xaf\xe7\xbb\x9f\xe8\xae\xa1\xe4\xb8\
    \x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\x14\x04\x12\x031\
    \x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\x14\x05\x12\x031\r\x11\n\x0e\n\
    \x07\x04\x01\x03\x01\x02\x14\x01\x12\x031\x12(\n\x0e\n\x07\x04\x01\x03\
    \x01\x02\x14\x03\x12\x031+-\n\x0e\n\x07\x04\x01\x03\x01\x02\x14\x08\x12\
    \x031.?\n\x0e\n\x07\x04\x01\x03\x01\x02\x14\x07\x12\x0319>\n,\n\x06\x04\
    \x01\x03\x01\x02\x15\x12\x032\x04;\"\x1d\xe6\x98\xaf\xe5\x90\xa6\xe8\x87\
    \xaa\xe5\xae\x9a\xe4\xb9\x89\xe6\xa8\xa1\xe5\x9d\x97\xe4\xb8\x9a\xe5\x8a\
    \xa1\r\n\n\x0e\n\x07\x04\x01\x03\x01\x02\x15\x04\x12\x032\x04\x0c\n\x0e\
    \n\x07\x04\x01\x03\x01\x02\x15\x05\x12\x032\r\x11\n\x0e\n\x07\x04\x01\
    \x03\x01\x02\x15\x01\x12\x032\x12#\n\x0e\n\x07\x04\x01\x03\x01\x02\x15\
    \x03\x12\x032&(\n\x0e\n\x07\x04\x01\x03\x01\x02\x15\x08\x12\x032):\n\x0e\
    \n\x07\x04\x01\x03\x01\x02\x15\x07\x12\x03249\n-\n\x06\x04\x01\x03\x01\
    \x02\x16\x12\x033\x04:\"\x1e\xe6\x98\xaf\xe5\x90\xa6\xe5\x85\x81\xe8\xae\
    \xb8bv3000\x20mcu\xe4\xb8\x9a\xe5\x8a\xa1\r\n\n\x0e\n\x07\x04\x01\x03\
    \x01\x02\x16\x04\x12\x033\x04\x0c\n\x0e\n\x07\x04\x01\x03\x01\x02\x16\
    \x05\x12\x033\r\x11\n\x0e\n\x07\x04\x01\x03\x01\x02\x16\x01\x12\x033\x12\
    \"\n\x0e\n\x07\x04\x01\x03\x01\x02\x16\x03\x12\x033%'\n\x0e\n\x07\x04\
    \x01\x03\x01\x02\x16\x08\x12\x033(9\n\x0e\n\x07\x04\x01\x03\x01\x02\x16\
    \x07\x12\x03338\n\x0b\n\x04\x04\x01\x02\x02\x12\x036\x02\x1f\n\x0c\n\x05\
    \x04\x01\x02\x02\x04\x12\x036\x02\n\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\
    \x036\x0b\x14\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x036\x15\x19\n\x0c\n\
    \x05\x04\x01\x02\x02\x03\x12\x036\x1d\x1e\n\n\n\x02\x04\x02\x12\x04:\0;\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03:\x08\x0e\n\n\n\x02\x04\x03\x12\x04=\0\
    ?\x01\n\n\n\x03\x04\x03\x01\x12\x03=\x08\x11\n0\n\x04\x04\x03\x02\0\x12\
    \x03>\x02\x1c\"#-1\xe4\xbb\xa3\xe8\xa1\xa8\xe5\xa4\xb1\xe8\xb4\xa5\xef\
    \xbc\x8c>=0\x20\xe4\xbb\xa3\xe8\xa1\xa8\xe6\x88\x90\xe5\x8a\x9f\r\n\n\
    \x0c\n\x05\x04\x03\x02\0\x04\x12\x03>\x02\n\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03>\x0b\x10\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03>\x11\x17\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x03>\x1a\x1b\n\n\n\x02\x04\x04\x12\x04A\
    \0C\x01\n\n\n\x03\x04\x04\x01\x12\x03A\x08\x0f\n\x0b\n\x04\x04\x04\x02\0\
    \x12\x03B\x02\x1d\n\x0c\n\x05\x04\x04\x02\0\x04\x12\x03B\x02\n\n\x0c\n\
    \x05\x04\x04\x02\0\x05\x12\x03B\x0b\x11\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03B\x12\x18\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03B\x1b\x1c\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(Login::generated_message_descriptor_data());
            messages.push(LoginAck::generated_message_descriptor_data());
            messages.push(Logout::generated_message_descriptor_data());
            messages.push(LogoutAck::generated_message_descriptor_data());
            messages.push(Kickout::generated_message_descriptor_data());
            messages.push(login_ack::User::generated_message_descriptor_data());
            messages.push(login_ack::Configure::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
